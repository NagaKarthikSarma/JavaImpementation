//package com.karthik.security.service;
//
//import java.security.Key;
//import java.security.NoSuchAlgorithmException;
//import java.util.Base64;
//import java.util.Date;
//import java.util.HashMap;
//import java.util.Map;
//
//import javax.crypto.KeyGenerator;
//import javax.crypto.SecretKey;
//
//import org.springframework.stereotype.Service;
//
//import io.jsonwebtoken.JwtBuilder;
//import io.jsonwebtoken.Jwts;
//import io.jsonwebtoken.SignatureAlgorithm;
//import io.jsonwebtoken.io.Decoders;
//import io.jsonwebtoken.security.InvalidKeyException;
//import io.jsonwebtoken.security.Keys;
//
////@Service
//public class JwtService {
//	// I can hardcode to provide the key or else I can use 
//	//private static final String SECRETKEY = "TmV5TYUI12345cdffgaggagg";
////	private static final String SECRET = "TmV3U2VjcmV0S2V5Rm9ySldUU2lnbmluZ1B1cnBvc2VzMTIzNDU2Nzg=\r\n";
//
//    private static String secretKey;
//
//    public JwtService(){
//        secretKey = generateSecretKey();
//    }
//
//    public String generateSecretKey() {
//        try {
//            KeyGenerator keyGen = KeyGenerator.getInstance("HmacSHA256");
//            SecretKey secretKey = keyGen.generateKey();
//            System.out.println("Secret Key : " + secretKey.toString());
//            return Base64.getEncoder().encodeToString(secretKey.getEncoded());
//        } catch (NoSuchAlgorithmException e) {
//            throw new RuntimeException("Error generating secret key", e);
//        }
//    }
//
//    public static String generateToken(String username) {
//
//        Map<String, Object> claims = new HashMap<>();
//
//        
//        return Jwts.builder()
//                .setClaims(claims)
//                .setSubject(username)
//              
//                .setIssuedAt(new Date(System.currentTimeMillis()))
//                .setExpiration(new Date(System.currentTimeMillis() + 1000*60*30))
//                .signWith(getKey(), SignatureAlgorithm.HS256).compact();
//
//    }
//
//    private static Key getKey() {
//        byte[] keyBytes = Decoders.BASE64.decode(secretKey);
//        return Keys.hmacShaKeyFor(keyBytes);
//    }
//	
//	
//	
//
//}
